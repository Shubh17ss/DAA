import java.util.*;
public class week8_1 {
    static class Edge{
        int src,nbr,wt;
        Edge(int src,int nbr,int wt)
        {
            this.src=src;
            this.nbr=nbr;
            this.wt=wt;
        }
    }
    static class pair implements Comparable<pair>
    {
        int vt,wt;
        pair(int vt,int wt)
        {
            this.vt=vt;
            this.wt=wt;
        }
        public int compareTo(pair o)
        {
            return this.wt-o.wt;
        }
    }
    public static void main(String args[])
    {
        Scanner Sc=new Scanner(System.in);
        System.out.println("Enter the number of vertices");
        int vertices=Sc.nextInt();
        ArrayList<Edge>[]graph=new ArrayList[vertices];
        for(int i=0;i<vertices;i++)
        {
            graph[i]=new ArrayList<>();
        }
        System.out.println("Enter the number of Edges");
        int edges=Sc.nextInt();
        boolean[] visited=new boolean[vertices];
        System.out.println("Enter the connections of the graph");
        for(int i=0;i<edges;i++)
        {
            int v1=Sc.nextInt();
            int v2=Sc.nextInt();
            int wt=Sc.nextInt();
            graph[v1].add(new Edge(v1, v2, wt));
        
        }
        PriorityQueue<pair> pq=new PriorityQueue<>();
        pq.add(new pair(0, 0));
        int weight=0;
        while(pq.size()>0)
        {
            pair rem=pq.remove();
            if(visited[rem.vt]==true)
            continue;
            visited[rem.vt]=true;
            weight=weight+rem.wt;
            for(Edge e:graph[rem.vt])
            {
                pq.add(new pair(e.nbr, e.wt));
            }
        }

        System.out.println("The minimum cost of spanning tree is: "+weight);
    }
}

